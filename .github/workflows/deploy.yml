# File: .github/workflows/deploy.yml
name: CI/CD for React App (with Nginx provisioning)

# 1) Trigger this workflow on every push to "main"
on:
    push:
        branches: [main]

jobs:
    deploy:
        # 2) Run all steps on a fresh Ubuntu VM hosted by GitHub Actions
        runs-on: ubuntu-latest

        steps:
            # 3) Step: Check out your repository code so we can deploy it
            - name: Checkout
              uses: actions/checkout@v3

            # 4) Step: SSH into your EC2 instance and run provisioning + deploy scripts
            - name: Provision & Deploy on EC2
              uses: appleboy/ssh-action@v0.1.6
              with:
                  # 4a) Which server to connect to (stored as a secret)
                  host: ${{ secrets.EC2_HOST }}

                  # 4b) Which user on that server (Ubuntu AMIs use "ubuntu")
                  username: ubuntu

                  # 4c) SSH private key (stored as a secret, exported from PuTTYgen or OpenSSH)
                  key: ${{ secrets.EC2_SSH_KEY }}

                  # 4d) SSH port (standard is 22)
                  port: 22

                  # 5) The actual shell script to run over SSH
                  script: |
                      set -e
                      # ----------------------------------------
                      # A) Install or update Nginx on the host
                      # ----------------------------------------
                      sudo apt-get update -y
                      sudo apt-get install -y nginx

                      # Remove the default Nginx welcome site so it won’t intercept port 80
                      sudo rm -f /etc/nginx/sites-enabled/default

                      # ---------------------------------------------------
                      # B) Write your custom Nginx proxy config for React
                      # ---------------------------------------------------
                      sudo tee /etc/nginx/sites-available/react-app.conf > /dev/null << 'EOF'
                      upstream react_app {
                          server 127.0.0.1:3000;
                      }

                      server {
                          # Listen on port 80 as the default server
                          listen 80 default_server;
                          listen [::]:80 default_server;
                          server_name _;

                          # Proxy all requests to the React container on localhost:3000
                          location / {
                              proxy_pass         http://react_app;
                              proxy_http_version 1.1;
                              proxy_set_header   Upgrade $http_upgrade;
                              proxy_set_header   Connection  "upgrade";
                              proxy_set_header   Host        $host;
                              proxy_cache_bypass $http_upgrade;
                          }
                      }
                      EOF

                      # Enable the new site by symlinking into sites-enabled
                      sudo ln -sfn /etc/nginx/sites-available/react-app.conf /etc/nginx/sites-enabled/react-app.conf

                      # Test Nginx config syntax and restart to apply changes
                      sudo nginx -t
                      sudo systemctl enable nginx
                      sudo systemctl restart nginx

                      # ---------------------------------------------------
                      # C) Pull latest code, build Docker image, and run it
                      # ---------------------------------------------------
                      cd ~/react-app
                      git fetch origin main
                      git reset --hard origin/main

                      # Build the multi-stage Docker image defined in your Dockerfile
                      sudo docker build -t react-app:latest .

                      # Stop & remove any old container named "react-app"
                      sudo docker stop react-app 2>/dev/null || true
                      sudo docker rm   react-app 2>/dev/null || true

                      # Run the new container:
                      # - Name it "react-app"
                      # - Map host port 3000 → container port 80
                      sudo docker run -d \
                        --name react-app \
                        -p 3000:80 \
                        react-app:latest

                      # Clean up any dangling (unused) Docker images
                      sudo docker image prune -f
